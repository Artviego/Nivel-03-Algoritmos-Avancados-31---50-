#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

#define MAX_VERTICES 100
#define INF 999999

int i, j;
typedef struct {
    int u, v, weight;
} Edge;

typedef struct {
    Edge edges[MAX_VERTICES * MAX_VERTICES];
    int numEdges;
} Graph;

typedef struct {
    int parent[MAX_VERTICES];
    int rank[MAX_VERTICES];
} DisjointSet;

// Função para criar um novo grafo
void initGraph(Graph* graph, int numEdges) {
    graph->numEdges = 0;
}

// Função para adicionar uma aresta ao grafo
void addEdge(Graph* graph, int u, int v, int weight) {
    graph->edges[graph->numEdges].u = u;
    graph->edges[graph->numEdges].v = v;
    graph->edges[graph->numEdges].weight = weight;
    graph->numEdges++;
}

// Função para inicializar o conjunto disjunto
void initDisjointSet(DisjointSet* ds, int n) {
    for (i = 0; i < n; i++) {
        ds->parent[i] = i;
        ds->rank[i] = 0;
    }
}

// Função para encontrar o representante de um conjunto
int find(DisjointSet* ds, int u) {
    if (ds->parent[u] != u)
        ds->parent[u] = find(ds, ds->parent[u]);
    return ds->parent[u];
}

// Função para unir dois conjuntos
void unionSets(DisjointSet* ds, int u, int v) {
    int rootU = find(ds, u);
    int rootV = find(ds, v);

    if (rootU != rootV) {
        if (ds->rank[rootU] > ds->rank[rootV])
            ds->parent[rootV] = rootU;
        else if (ds->rank[rootU] < ds->rank[rootV])
            ds->parent[rootU] = rootV;
        else {
            ds->parent[rootV] = rootU;
            ds->rank[rootU]++;
        }
    }
}

// Função para comparar duas arestas (para ordenação)
int compareEdges(const void* a, const void* b) {
    return ((Edge*)a)->weight - ((Edge*)b)->weight;
}

// Função para executar o Algoritmo de Kruskal
void kruskal(Graph* graph, int numVertices) {
    DisjointSet ds;
    initDisjointSet(&ds, numVertices);

    // Ordena todas as arestas
    qsort(graph->edges, graph->numEdges, sizeof(Edge), compareEdges);

    printf("Arestas da Árvore Geradora Mínima:\n");
    int mstWeight = 0;
    for (i = 0; i < graph->numEdges; i++) {
        Edge edge = graph->edges[i];
        int rootU = find(&ds, edge.u);
        int rootV = find(&ds, edge.v);

        // Se a aresta não formar um ciclo
        if (rootU != rootV) {
            printf("%d -- %d: %d\n", edge.u, edge.v, edge.weight);
            mstWeight += edge.weight;
            unionSets(&ds, rootU, rootV);
        }
    }

    printf("Peso total da Árvore Geradora Mínima: %d\n", mstWeight);
}

int main() {
	setlocale(LC_ALL, "Portuguese");
    int numVertices = 4; // Número de vértices no grafo
    Graph graph;
    initGraph(&graph, 0);

    // Adiciona arestas ao grafo (u, v, weight)
    addEdge(&graph, 0, 1, 10);
    addEdge(&graph, 0, 2, 6);
    addEdge(&graph, 0, 3, 5);
    addEdge(&graph, 1, 3, 15);
    addEdge(&graph, 2, 3, 4);

    kruskal(&graph, numVertices);

    return 0;
}
