#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>

#define MAX_SIZE 100

// Estrutura para a pilha
typedef struct {
  char items[MAX_SIZE];
  int top;
} Stack;

// Inicializa a pilha
void stack_init(Stack *stack) {
  stack->top = -1;
}

// Verifica se a pilha está vazia
int stack_is_empty(Stack *stack) {
  return stack->top == -1;
}

// Verifica se a pilha está cheia
int stack_is_full(Stack *stack) {
  return stack->top == MAX_SIZE - 1;
}

// Empilha um item na pilha
void stack_push(Stack *stack, char item) {
  if (stack_is_full(stack)) {
    printf("Pilha cheia!\n");
    return;
  }
  stack->top++;
  stack->items[stack->top] = item;
}

// Desempilha um item da pilha
char stack_pop(Stack *stack) {
  if (stack_is_empty(stack)) {
    printf("Pilha vazia!\n");
    return -1; 
  }
  char item = stack->items[stack->top];
  stack->top--;
  return item;
}

// Retorna o topo da pilha sem desempilhar
char stack_peek(Stack *stack) {
  if (stack_is_empty(stack)) {
    printf("Pilha vazia!\n");
    return -1; 
  }
  return stack->items[stack->top];
}

// Verifica se um caractere é um operador
int isOperator(char c) {
  return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
}

// Retorna a precedência de um operador
int precedence(char op) {
  if (op == '+' || op == '-') {
    return 1;
  } else if (op == '*' || op == '/') {
    return 2;
  } else if (op == '^') {
    return 3;
  } else {
    return 0;
  }
}

// Converte uma expressão infixa para pós-fixa
void infixToPostfix(char *infix, char *postfix) {
  Stack stack;
  stack_init(&stack);
  int i, j = 0;

  for (i = 0; infix[i] != '\0'; i++) {
    if (infix[i] >= '0' && infix[i] <= '9') { 
      postfix[j++] = infix[i]; 
    } else if (infix[i] == '(') { 
      stack_push(&stack, infix[i]); 
    } else if (infix[i] == ')') {
      while (!stack_is_empty(&stack) && stack_peek(&stack) != '(') {
        postfix[j++] = stack_pop(&stack);
      }
      if (!stack_is_empty(&stack) && stack_peek(&stack) == '(') {
        stack_pop(&stack); 
      }
    } else if (isOperator(infix[i])) { 
      while (!stack_is_empty(&stack) && precedence(infix[i]) <= precedence(stack_peek(&stack))) {
        postfix[j++] = stack_pop(&stack);
      }
      stack_push(&stack, infix[i]);
    }
  }

  while (!stack_is_empty(&stack)) {
    postfix[j++] = stack_pop(&stack);
  }
  postfix[j] = '\0'; 
}

int main() {
	setlocale(LC_ALL, "Portuguese");
  char infix[MAX_SIZE], postfix[MAX_SIZE];

  printf("Digite a expressão infixa: ");
  scanf("%s", infix);

  infixToPostfix(infix, postfix);

  printf("Expressão pós-fixa: %s\n", postfix);

  return 0;
}
