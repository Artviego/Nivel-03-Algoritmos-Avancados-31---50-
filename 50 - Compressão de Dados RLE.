#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>

// Função para comprimir uma string usando RLE
char* rle_compress(char* data) {
  int n = strlen(data);
  char* compressed = malloc(n * 2 + 1); // Alocação de memória para a string comprimida
  int count = 1;
  int j = 0; // Índice para a string comprimida
  int i = 0;
  int k = 0;

  for (i = 1; i < n; i++) {
    if (data[i] == data[i - 1]) {
      count++;
    } else {
      // Adiciona o número de repetições e o caractere anterior
      compressed[j++] = (char)(count + '0');
      compressed[j++] = data[i - 1];
      count = 1;
    }
  }

  // Adiciona o último caractere e sua contagem
  compressed[j++] = (char)(count + '0');
  compressed[j++] = data[n - 1];
  compressed[j] = '\0'; // Adiciona o caractere nulo para terminar a string

  return compressed;
}

// Função para descomprimir uma string comprimida usando RLE
char* rle_decompress(char* compressed) {
  int n = strlen(compressed);
  char* decompressed = malloc(n * 2 + 1); // Alocação de memória para a string descomprimida
  int count = 0;
  int j = 0; // Índice para a string descomprimida
  int i = 0;
  int k = 0;

  for (i = 0; i < n; i++) {
    if (compressed[i] >= '0' && compressed[i] <= '9') {
      count = count * 10 + (compressed[i] - '0');
    } else {
      // Repete o caractere a quantidade especificada de vezes
      for (k = 0; k < count; k++) {
        decompressed[j++] = compressed[i];
      }
      count = 0;
    }
  }
  decompressed[j] = '\0'; // Adiciona o caractere nulo para terminar a string

  return decompressed;
}

int main() {
  setlocale(LC_ALL, "Portuguese");
  char data[] = "AAABBBCCCDDDE";
  char* compressed_data = rle_compress(data);
  printf("Dados comprimidos: %s\n", compressed_data);

  char* decompressed_data = rle_decompress(compressed_data);
  printf("Dados descomprimidos: %s\n", decompressed_data);

  free(compressed_data); // Libera a memória alocada
  free(decompressed_data); // Libera a memória alocada

  return 0;
}
