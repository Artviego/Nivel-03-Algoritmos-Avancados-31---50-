#include <stdio.h>
#include <string.h>
#include <locale.h>

// Calcula o prefixo mais longo próprio de cada sufixo do padrão
void calcular_prefixo_proprio(char padrao[], int m, int prefixo_proprio[]) {
  prefixo_proprio[0] = 0;
  int i = 1, j = 0;
  while (i < m) {
    if (padrao[i] == padrao[j]) {
      prefixo_proprio[i] = j + 1;
      i++;
      j++;
    } else {
      if (j > 0) {
        j = prefixo_proprio[j - 1];
      } else {
        prefixo_proprio[i] = 0;
        i++;
      }
    }
  }
}

// Função para reconhecer um padrão em um texto usando um vetor
void reconhece_padrao(char texto[], char padrao[], int n, int m) {
  int prefixo_proprio[m];
  calcular_prefixo_proprio(padrao, m, prefixo_proprio);

  int i = 0, j = 0;
  while (i < n) {
    if (texto[i] == padrao[j]) {
      i++;
      j++;
    }
    if (j == m) {
      printf("Padrão encontrado na posição: %d\n", i - m);
      j = prefixo_proprio[j - 1];
    } else if (i < n && texto[i] != padrao[j]) {
      if (j > 0) {
        j = prefixo_proprio[j - 1];
      } else {
        i++;
      }
    }
  }
}

int main() {
  setlocale(LC_ALL, "Portuguese");
  
  char texto[100];
  char padrao[100];

  printf("Digite o texto: ");
  fgets(texto, 100, stdin);
  texto[strcspn(texto, "\n")] = 0; // Remove o caractere de nova linha

  printf("Digite o padrão: ");
  fgets(padrao, 100, stdin);
  padrao[strcspn(padrao, "\n")] = 0; // Remove o caractere de nova linha

  int n = strlen(texto);
  int m = strlen(padrao);

  reconhece_padrao(texto, padrao, n, m);

  return 0;
}
